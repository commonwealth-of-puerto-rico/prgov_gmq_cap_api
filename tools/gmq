#!/usr/bin/env ruby
# Command line tool for generate users for
# the PR.Gov GMQ API system.
# Developed by: Andrés Colón
# Date: 2014-05-20 4:55AM

# Save the root path of the application
ROOT_DIR = File.expand_path(File.dirname(__FILE__) +"/../")
# First, fix the paths so that everything under the main directory
# is in the ruby path. This way we don't have to include relative filepaths
$: << ROOT_DIR

require 'json'
require 'digest/md5'
require 'base64'
require 'uri'
require 'securerandom'
require 'thor'
require 'app/helpers/colorize'

class Gmq < Thor

	class Generate < Thor
		desc "user <name> <group1>, <group2>...",
		     "Generate a user info to paste to the config file."
		def user(name, *groups)
			puts "Your #{name} would belong to #{groups}"
			key = password()
			result = { name => { "passkey" => "#{key}",
			                     "groups" => groups}}.to_json.to_s
			puts "\nAppend this to the '../config/users.json', taking care to add "+
			     "the proper commas in the file:"
			puts "\t#{result[1..-2]}"
		end

		desc "password", "generates a proper CAP API password for the user and "+
		                 "hashed and salted pass-key for the API configuration"
		def password

			# The API system will expect a hex string, with a lenght of 24.
			# Here we specify n as 12 in order to guarantee a length of 24,
			# since the length is always twice of n with SecureRandom.hex.
			# The salt will be appended to the hash to create the passkey.

			# The passkey will be used, the salt extracted and ran against
			# the system. This is just to make rainbow tables impractical
			# Each user password is auto-generated salted and jumbled up.
			# So long as the users keep their passwords safe, someone
			# could steal a copy of the config file and still be unable to
			# authenticate. Users must safeguard their passwords once generated
			# and the passwords must travel through a tunnel on insecure lines.
			random_salt = SecureRandom.hex(12)
			random_password = SecureRandom.hex(12)
			hash = Digest::MD5.hexdigest(random_password + random_salt)
			puts "Hand this password (securely) to the user: #{random_password}"
			#puts "The salt for the system: #{random_salt}"
			# puts "The pass-key for the system: #{hash}"
			puts "This is the pass-key for the system: #{random_salt + hash}"
			return "#{random_salt + hash}"
		end
	
		desc "start", "Start the GMQ server"
		def start
			puts "Starting GMQ...".bold.green
			#system "ruby ../server.rb &"
			Dir.chdir ROOT_DIR
			system "ruby server.rb &"
		end
	
		desc "go", "Starts the server, stopping any existing process first"
		def go
			stop
			start
		end

		desc "stop", "Stop the GMQ server"
		def stop 
			current_user = `whoami`.strip
			output = `ps -u #{current_user} | grep ruby`
			pid = nil
			puts "#{"Stopping".bold.red} all GMQ processes under user #{current_user}."
			output.split("\n").each do |line|
				if line.include? "ruby server.rb"
					pid = line.split(" ")
					#puts "Found: #{pid}"
					pid = pid[1]
					puts "Found pid #{pid} for the GMQ. Trying to stop it."
					system `kill -9 #{pid}` if pid
					puts "Stopped process #{pid}. Done".bold.red
				end
			end
			if pid.nil?
				puts "Could not find a GMQ process under user #{current_user}."
			end
		end
		
		desc "stress <user> <password> <gmq url>", 
		     "Partly implemented: Perform a stress test using httperf on a url."
		def stress_test(user, password, url) 
			#puts "#{user}, #{password}, #{url}"	
			credentials = "#{user.strip}:#{password.strip}"
			credentials = Base64.encode64(credentials)
			begin
				uri = URI(url) 
				server = uri.host
				port = uri.port
				scheme = uri.scheme # http or https
				path = uri.request_uri # the path of the request with any queries, ie: /v1/cap/?q=1 
			rescue Exception => e
				puts "Could not parse the URL. Error: #{e}"
				exit
			end
			cmd = "httperf --server #{server} --port #{port} --uri #{path} "+
			      "--add-header 'Authorization: Basic #{credentials}\n' "+
			      "--num-conns 20 --rate 20" 
			puts "Running command: #{cmd}"
			`#{cmd}`  # execute the command and output to STDOUT.
		end
	end
end

trap("SIGINT") { exit }

Gmq::Generate.start(ARGV)
